version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install


  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            # install latest version from nodejs
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # use n version manager to use nodejs version 13.8.0
            sudo npm install --global n
            sudo n 13.8.0

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            exit 0
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
                fi          

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: basic_success_1

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: basic_success_1
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: basic_success_1

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm test
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: basic_success_1

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: basic_success_1

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: basic_success_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar, gzip, git
          command: yum -y install tar gzip git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "68:c3:2a:25:1e:c1:4b:41:93:38:a3:70:a8:6f:3c:b4"
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli

      - run:
          name: Configure server using Ansible
          command: |

            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: prepare environment for backend build
          command: |
            echo "Preparing environment for backend build"
            echo ENVIRONMENT=$ENVIRONMENT >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |           
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt            
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "${KVDB_BUCKET}"
              echo"https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}"
              curl --insecure https://kvdb.io/AjBjR66XR6gU5kGtwRWr4U/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
    #Rollback on failure      
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/

      - run:
          name: Install image dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl

      - run:
          name: Install AWS CLI
          command: |
            pip install awscli

      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm install

      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            export NODE_ENV=production
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: 
            - "68:c3:2a:25:1e:c1:4b:41:93:38:a3:70:a8:6f:3c:b4"
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            pip install awscli

      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files     
      - run:
          name: Deploy backend
          command: |
            export NODE_ENV=production
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*{.ts,.js}
            
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
      
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install image dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl aws-cli
            pip install awscli

      - run:
          name: Get backend url and perform smoke test on the backend server
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo ${BACKEND_IP}
            
            export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')
            
            echo $BACKEND
            export API_URL="http://${BACKEND}:3030"
            echo "API_URL=${API_URL}"

            echo "Sleeping for 1 minute"
            sleep 60

            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi 

      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"

            echo ${URL}
            
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations         
  #   cloudfront-update:
  #     docker:
  #       # Docker image here that supports AWS CLI
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Install dependencies
  #           command: |
  #             # your code here
  #       - run:
  #           name: Update cloudfront distribution
  #           command: |
  #             # your code here
  #       # Here's where you will add some code to rollback on failure

  # cleanup:
  #   docker:
  #     # Docker image here
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
